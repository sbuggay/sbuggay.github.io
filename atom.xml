<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>devanbuggay</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="devanbuggay.com/"/>
  <updated>2020-02-24T21:27:30.549Z</updated>
  <id>devanbuggay.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Boids and the Trees</title>
    <link href="devanbuggay.com/2020/02/24/boids-quadtree/"/>
    <id>devanbuggay.com/2020/02/24/boids-quadtree/</id>
    <published>2020-02-24T08:00:08.000Z</published>
    <updated>2020-02-24T21:27:30.549Z</updated>
    
    <content type="html"><![CDATA[<p>I have recently been binge watching <a href="https://www.youtube.com/user/shiffman" target="_blank" rel="noopener">The Coding Train</a> by Daniel Shiffman. In two of his videos he <a href="https://www.youtube.com/watch?v=mhjuuHl6qHM" target="_blank" rel="noopener">creates a flocking simulation</a> and a <a href="https://www.youtube.com/watch?v=OJxEcs0w_kE" target="_blank" rel="noopener">Quadtree</a>. I thought it would be a good excercise to try and combine the two concepts. </p><p><img src="/images/quadtree.png" alt="quadtree"></p><p>I was fairly happy with the result. You can play around with the simulation here: <a href="https://devanbuggay.com/boids">https://devanbuggay.com/boids</a>.</p><p>There is also another amazing YouTube channel by <a href="https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ" target="_blank" rel="noopener">Sebastian Lague</a> where he creates <a href="https://www.youtube.com/watch?v=bqtqltqcQhw" target="_blank" rel="noopener">3D boids with collision detection</a>.</p><h3 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h3><p>A list of an improvements I want to make in the future.</p><ul><li>Sliders for simulation variables (perception radius, cohesion/alignment/seperation factors, speed, etc)</li><li>Better quadtree performance by having it be incremental (only update a boid in the tree once it’s left it’s boundary)</li><li>Improved interaction</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://en.wikipedia.org/wiki/Boids" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Boids</a></li><li><a href="https://en.wikipedia.org/wiki/Quadtree" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quadtree</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have recently been binge watching &lt;a href=&quot;https://www.youtube.com/user/shiffman&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Coding Train&lt;/a&gt; b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Error Pages for Reverse Proxied NGINX Directives</title>
    <link href="devanbuggay.com/2019/07/08/error-pages-nginx/"/>
    <id>devanbuggay.com/2019/07/08/error-pages-nginx/</id>
    <published>2019-07-09T06:38:07.000Z</published>
    <updated>2020-01-21T08:01:09.468Z</updated>
    
    <content type="html"><![CDATA[<p>I use NGINX to <a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/" target="_blank" rel="noopener">reverse proxy</a> a few of my services so that they can be reached at proper domain names.<br>NGINX makes it very easy to redirect specific error codes to static pages. A common one for reverse proxy is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502" target="_blank" rel="noopener">502 Bad Gateway</a>, meaning the service couldn’t be reached (server crashed, being upgraded, etc).</p><p>The default error page for NGINX is pretty ugly:</p><p><img src="/images/502.png" alt="502"></p><p>You can easily catch these with the <code>error_page</code> server directive:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_page 500 502 503 504 /server-error.html</span><br></pre></td></tr></table></figure><p>Make sure to correctly set your web root and specify that the location of <code>/server-error.html</code> is <code>internal</code>.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name &lt;server_name&gt;</span><br><span class="line">    root &lt;web_root&gt;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /server-error.html</span><br><span class="line">    </span><br><span class="line">    location /server-error.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include proxypass.conf;</span><br><span class="line">        proxy_pass http://localhost:5000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Any custom error page will do, for example mine just links to my twitter account where I post updates on maintenance/downtime. You can even have it route to a different server all-together with another proxy_pass rule.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I use NGINX to &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;reverse proxy&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Using systemd-analyze to Debug Boot Performance</title>
    <link href="devanbuggay.com/2019/06/05/systemd-analyze/"/>
    <id>devanbuggay.com/2019/06/05/systemd-analyze/</id>
    <published>2019-06-05T08:22:20.000Z</published>
    <updated>2019-06-09T06:08:11.189Z</updated>
    
    <content type="html"><![CDATA[<p>After doing a dist upgrade to Ubuntu 19.04, booting started taking over 20 seconds. <code>systemd</code> comes with a handy tool called <code>systemd-analyze</code> to debug these kinds of issues.</p><p>From the <code>man</code> file:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemd-analyze may be used to determine system boot-up performance</span><br><span class="line">statistics and retrieve other state and tracing information from the</span><br><span class="line">system and service manager, and to verify the correctness of unit</span><br><span class="line">files. It is also used to access special functions useful for advanced</span><br><span class="line">system manager debugging.</span><br></pre></td></tr></table></figure><p>In particular we are interested in the <code>blame</code> functionality of it.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemd-analyze [OPTIONS...] blame</span><br><span class="line"></span><br><span class="line">systemd-analyze blame prints a list of all running units, ordered by</span><br><span class="line">the time they took to initialize. This information may be used to</span><br><span class="line">optimize boot-up times. Note that the output might be misleading as the</span><br><span class="line">initialization of one service might be slow simply because it waits for</span><br><span class="line">the initialization of another service to complete. Also note:</span><br><span class="line">systemd-analyze blame doesn&apos;t display results for services with</span><br><span class="line">Type=simple, because systemd considers such services to be started</span><br><span class="line">immediately, hence no measurement of the initialization delays can be</span><br><span class="line">done.</span><br></pre></td></tr></table></figure><p>Neat. Seems like what we want.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[devan:~]$ systemd-analyze blame</span><br><span class="line"></span><br><span class="line">21.382s plymouth-quit-wait.service</span><br><span class="line">1.982s snap-node-2184.mount</span><br><span class="line">1.973s snap-gnome\x2dsystem\x2dmonitor-81.mount</span><br><span class="line">1.948s snap-vlc-770.mount</span><br><span class="line">1.936s snap-gnome\x2dlogs-61.mount</span><br><span class="line">1.905s snap-gnome\x2dcharacters-272.mount</span><br><span class="line">1.827s snap-gnome\x2d3\x2d28\x2d1804-47.mount</span><br><span class="line">1.781s snap-gnome\x2d3\x2d28\x2d1804-51.mount</span><br><span class="line">1.778s snap-gnome\x2d3\x2d26\x2d1604-82.mount</span><br><span class="line">1.752s snap-gnome\x2dcharacters-280.mount</span><br><span class="line">1.705s snap-spotify-34.mount</span><br><span class="line">1.662s snap-gtk\x2dcommon\x2dthemes-701.mount</span><br><span class="line">1.651s snap-gnome\x2d3\x2d26\x2d1604-70.mount</span><br><span class="line">1.600s snap-node-2212.mount</span><br><span class="line">1.588s snap-core-6531.mount</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Looks like <code>plymouth-quit-wait.service</code> is the culprit here. <code>plymouth</code> seems to be related to displaying the splash screen during boot, not something I really care about.</p><p>After some quick Googling, <a href="https://askubuntu.com/a/766991" target="_blank" rel="noopener">it looks simple enough to disable it during boot</a>. Edit <code>/etc/default/grub</code> and change</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure><p>Apply changes with <code>sudo update-grub</code> and reboot.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[devan:~]$ systemd-analyze blame</span><br><span class="line">1.858s snap-gnome\x2dcalculator-352.mount</span><br><span class="line">1.855s snap-firefox-216.mount</span><br><span class="line">1.817s snap-gnome\x2dcharacters-272.mount</span><br><span class="line">1.766s snap-gnome\x2dlogs-57.mount</span><br><span class="line">1.763s snap-gtk\x2dcommon\x2dthemes-1198.mount</span><br><span class="line">1.660s snap-gnome\x2dsystem\x2dmonitor-83.mount</span><br><span class="line">1.656s snap-vlc-770.mount</span><br><span class="line">1.628s snap-gnome\x2d3\x2d28\x2d1804-47.mount</span><br><span class="line">1.591s snap-gtk\x2dcommon\x2dthemes-701.mount</span><br><span class="line">1.531s snap-gnome\x2d3\x2d28\x2d1804-51.mount</span><br><span class="line">1.527s snap-core-6964.mount</span><br><span class="line">1.501s snap-spotify-34.mount</span><br><span class="line">1.489s snap-gnome\x2dcalculator-260.mount</span><br><span class="line">1.471s snap-gnome\x2dsystem\x2dmonitor-81.mount</span><br><span class="line">1.458s snap-core18-782.mount</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Much better :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After doing a dist upgrade to Ubuntu 19.04, booting started taking over 20 seconds. &lt;code&gt;systemd&lt;/code&gt; comes with a handy tool called &lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Half-Life 1 Quality of Life Changes</title>
    <link href="devanbuggay.com/2018/02/04/half-life-1/"/>
    <id>devanbuggay.com/2018/02/04/half-life-1/</id>
    <published>2018-02-04T08:00:00.000Z</published>
    <updated>2019-07-02T21:18:17.218Z</updated>
    
    <content type="html"><![CDATA[<p>[Updated 7/2/2019]</p><p>At the time of writing, Half-Life 1’s release date <a href="https://en.wikipedia.org/wiki/Half-Life_(video_game)" target="_blank" rel="noopener">is approaching nearly 20 years old</a>. It’s suprising how well the game has held up considering it’s roots are even older than that coming from the Quake 1/2 engine.</p><p>On a recent playthrough of Half-Life 1 I ran in to a few minor annoyances:</p><ul><li>Enemy corpses block player movement until their death animation is done.</li><li>With <code>hud_fastswitch 1</code>, if there is more than one weapon for that slot there is still an extra action to select it.</li><li><del>Using the <code>use</code> key slows you down to <code>0.3</code> speed.</del> (This is actually used in speedruns for prop boosting, best to leave it alone.)</li><li>Doors cannot be opened with the <code>use</code> key.</li><li>Items cannot be picked up with the <code>use</code> key.</li><li>Weapon impact particles appear on skybox textures.</li><li>Autoswitching to newly picked up weapons.</li></ul><p>It’s likely that some of these were intentional design decisions made by the developers, but it would be nice to at least have the option.</p><p>Luckily for us, Valve open sourced the goldsrc engine in 2013. You can find the official repo on GitHub here: <a href="https://github.com/ValveSoftware/halflife" target="_blank" rel="noopener">https://github.com/ValveSoftware/halflife</a>. In this post we will take a look at some of these issues and see if we can mitigate them.</p><h2 id="Enemy-corpses-block-player-movement-until-their-death-animation-is-done"><a href="#Enemy-corpses-block-player-movement-until-their-death-animation-is-done" class="headerlink" title="Enemy corpses block player movement until their death animation is done."></a>Enemy corpses block player movement until their death animation is done.</h2><p><img src="/images/solid-nofix.gif" alt="solid-nofix"></p><p>Here is an example. Even though I am holding forward the entire time, the entity is solid until after the death animation is complete.</p><p>Let’s take a look at the relevant function. There were a few commented out lines of code that I have removed for clarity.</p><figure class="highlight cpp"><figcaption><span>combat.cpp</span><a href="https://github.com/sbuggay/halflife/blob/5d761709a31ce1e71488f2668321de05f791b405/dlls/combat.cpp#L518-L532" target="_blank" rel="noopener">hldll/dlls/combat.cpp:518</a></figcaption><table><tr><td class="gutter"><pre><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CBaseMonster::BecomeDead( <span class="keyword">void</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// don't let autoaim aim at corpses.</span></span><br><span class="line">pev-&gt;takedamage = DAMAGE_YES;</span><br><span class="line"></span><br><span class="line"><span class="comment">// give the corpse half of the monster's original maximum health. </span></span><br><span class="line">pev-&gt;health = pev-&gt;max_health / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// max_health now becomes a counter for how many blood decals the corpse can place.</span></span><br><span class="line">pev-&gt;max_health = <span class="number">5</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// make the corpse fly away from the attack vector</span></span><br><span class="line">pev-&gt;movetype = MOVETYPE_TOSS;</span><br><span class="line"></span><br><span class="line marked"><span class="comment">// make the corpse non-solid to not block the player after death</span></span><br><span class="line marked">pev-&gt;solid = SOLID_NOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function gets called after an entity takes damage and it’s health drops below <code>0</code>. However, it doesn’t normally set the <code>pev-&gt;solid</code> flag to <code>SOLID_NOT</code>. At the bottom, you will see our change.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// make the corpse non-solid to not block the player after death</span></span><br><span class="line">pev-&gt;solid = SOLID_NOT;</span><br></pre></td></tr></table></figure><p>After our change.</p><p><img src="/images/solid-fix.gif" alt="solid-fix"></p><p>As you can see, the marine no longer blocks us.</p><h2 id="With-hud-fastswitch-1-if-there-is-more-than-one-weapon-for-that-slot-there-is-still-an-extra-action-to-select-it"><a href="#With-hud-fastswitch-1-if-there-is-more-than-one-weapon-for-that-slot-there-is-still-an-extra-action-to-select-it" class="headerlink" title="With hud_fastswitch 1, if there is more than one weapon for that slot there is still an extra action to select it."></a>With <code>hud_fastswitch 1</code>, if there is more than one weapon for that slot there is still an extra action to select it.</h2><p>In Half-Life 2, activating a weapon slot that you are already using will automatically cycle through all the weapons in the slot. In Half-Life 1, the engine will instead present the user with the normal weapon selection menu. Requiring you to click to activate the weapon you have cycled to. This makes <code>hud_fastswitch 1</code> useless for any weapon slot that you have more than one valid weapon in.</p><p>I quite liked Half-Life 2’s solution to the problem, so let’s see if we can implement it.</p><p>We only need to concern ourselves with the part of the code that actually cares if <code>hud_fastswitch 1</code> is active, as we want to make sure we don’t regress how the normal weapon selection works.    </p><figure class="highlight cpp"><figcaption><span>combat.cpp</span><a href="https://github.com/ValveSoftware/halflife/blob/5d761709a31ce1e71488f2668321de05f791b405/cl_dll/ammo.cpp#L416-L477" target="_blank" rel="noopener">cl_dll/ammo.cpp:416</a></figcaption><table><tr><td class="gutter"><pre><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><span class="line">WEAPON *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">bool</span> fastSwitch = CVAR_GET_FLOAT( <span class="string">"hud_fastswitch"</span> ) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( (gpActiveSel == <span class="literal">NULL</span>) || (gpActiveSel == (WEAPON *)<span class="number">1</span>) || (iSlot != gpActiveSel-&gt;iSlot) )</span><br><span class="line">&#123;</span><br><span class="line">PlaySound( <span class="string">"common/wpn_hudon.wav"</span>, <span class="number">1</span> );</span><br><span class="line">p = GetFirstPos( iSlot );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( p &amp;&amp; fastSwitch ) <span class="comment">// check for fast weapon switch mode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// if fast weapon switch is on, then weapons can be selected in a single keypress</span></span><br><span class="line"><span class="comment">// but only if there is only one item in the bucket</span></span><br><span class="line">WEAPON *p2 = GetNextActivePos( p-&gt;iSlot, p-&gt;iSlotPos );</span><br><span class="line"><span class="keyword">if</span> ( !p2 )</span><br><span class="line">&#123;<span class="comment">// only one active item in bucket, so change directly to weapon</span></span><br><span class="line">ServerCmd( p-&gt;szName );</span><br><span class="line">g_weaponselect = p-&gt;iId;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s take a look at what we’ve got here. <code>p</code> is going to be a pointer to our eventual selected weapon and <code>fastSwitch</code> is a boolean that will be set to <code>true</code> if we have <code>hud_fastswitch 1</code> active.<br>First, it checks to make sure we aren’t currently in the weapon menu, that the weapon we selected isn’t the crowbar, and that the slot we selected isn’t the one currently selected in the weapon menu.</p><p><code>WEAPON *p2 = GetNextActivePos( p-&gt;iSlot, p-&gt;iSlotPos );</code> is checking if there is a valid weapon in the next position in our slot. Our weapon only “fast switches” if <code>p2</code> comes back with nothing (meaning there is no other valid weapon in the same slot.)</p><p>We want to change this behavior to instead cycle through every weapon in the slot.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( p &amp;&amp; fastSwitch ) <span class="comment">// check for fast weapon switch mode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// if we already have this weapon select, move on to the next.</span></span><br><span class="line"><span class="keyword">if</span> (currentSel &amp;&amp; currentSel-&gt;iSlot == iSlot)</span><br><span class="line">&#123;</span><br><span class="line">p = GetNextActivePos( currentSel-&gt;iSlot, currentSel-&gt;iSlotPos );</span><br><span class="line"></span><br><span class="line"><span class="comment">// if there was no next active pos, revert to the first in the slot</span></span><br><span class="line"><span class="keyword">if</span> ( !p )</span><br><span class="line">&#123;</span><br><span class="line">p = GetFirstPos( iSlot );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerCmd( p-&gt;szName );</span><br><span class="line">g_weaponselect = p-&gt;iId;</span><br><span class="line">currentSel = p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have added a variable <code>currentSel</code> that keeps track of our last selected weapon.<br><code>if (currentSel &amp;&amp; currentSel-&gt;iSlot == iSlot)</code> if there was a previously selected weapon, and the slot we are trying to move to is in the same slot, we simply get the next valid weapon in the slot. If there is no valid next weapon, we must be at the end of the list. So we default back to the first position.</p><h2 id="Using-the-use-key-slows-you-down-to-0-3-speed"><a href="#Using-the-use-key-slows-you-down-to-0-3-speed" class="headerlink" title="Using the use key slows you down to 0.3 speed."></a><del>Using the <code>use</code> key slows you down to <code>0.3</code> speed.</del></h2><p>Update: This actually isn’t a good idea, but I’m leaving the code changes here for anyone curious.</p><p>Under <code>pm_shared/pm_shared.c</code>.</p><p><code>PM_PlayerMove</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Slow down, I'm pulling it! (a box maybe) but only when I'm standing on ground</span></span><br><span class="line"><span class="keyword">if</span> ( ( pmove-&gt;onground != <span class="number">-1</span> ) &amp;&amp; ( pmove-&gt;cmd.buttons &amp; IN_USE) )</span><br><span class="line">&#123;</span><br><span class="line">VectorScale( pmove-&gt;velocity, <span class="number">0.3</span>, pmove-&gt;velocity );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sbuggay/halflife/blob/5d761709a31ce1e71488f2668321de05f791b405/pm_shared/pm_shared.c#L3025-L3029" target="_blank" rel="noopener">https://github.com/sbuggay/halflife/blob/5d761709a31ce1e71488f2668321de05f791b405/pm_shared/pm_shared.c#L3025-L3029</a></p><p>So this seems to slow you down for the case of which a box is being pulled. So we can simply only apply this vector scaling while moving backwards.</p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>You can find these changes and more on my fork of of the source <a href="https://github.com/sbuggay/halflife/tree/small-qol-changes" target="_blank" rel="noopener">https://github.com/sbuggay/halflife/tree/small-qol-changes</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[Updated 7/2/2019]&lt;/p&gt;
&lt;p&gt;At the time of writing, Half-Life 1’s release date &lt;a href=&quot;https://en.wikipedia.org/wiki/Half-Life_(video_game
      
    
    </summary>
    
    
      <category term="c++" scheme="devanbuggay.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Higher Order Function Composition in JavaScript</title>
    <link href="devanbuggay.com/2018/01/11/function-composition/"/>
    <id>devanbuggay.com/2018/01/11/function-composition/</id>
    <published>2018-01-11T08:00:00.000Z</published>
    <updated>2019-07-22T01:19:03.433Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Function_composition_(computer_science)" target="_blank" rel="noopener">Function composition</a> is the act of combining one or many functions into a single function.</p><p>For example, lets say our compose function signiture looks like this:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">functions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// our code to build the composition</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we can use this to craft our composition like so, where a, b, c are functions themselves</span></span><br><span class="line"><span class="keyword">const</span> composition = compose([a, b, c]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now composition can be used as a function which applies a -&gt; b -&gt; c to generate our output</span></span><br><span class="line">composition(x);</span><br></pre></td></tr></table></figure><p>How can we build this function?</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">functions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return our inital anonymous function that simply takes in a value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// iterate over our functions, applying them to value in the order given</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; functions.length; i++) &#123;</span><br><span class="line">            <span class="comment">// get our output from this function</span></span><br><span class="line">            <span class="keyword">let</span> output = functions[i](value);</span><br><span class="line">            <span class="comment">// set this to value so the next functions input will be this output</span></span><br><span class="line">            value = output;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return our now transformed value</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s improve on this further by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">forEach</a>.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">functions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return our inital anonymous function that simply takes in a value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// iterate over our functions, carrying `value` along</span></span><br><span class="line">        functions.forEach(<span class="function">(<span class="params">f</span>) =&gt;</span> &#123;</span><br><span class="line">            value = f(value);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return our now transformed value</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With that simple change we get something much cleaner. We can simplify even futher by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">reduce</a>, where we use the accumulator to store the output of the previous function, with it’s inital value being our input.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">functions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">value</span>) =&gt;</span> functions.reduceReduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Update 7/21: Technically this should be <code>reduceRight</code> and not <code>reduce</code>.</p><p>Let’s take a look at a working example.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the functional equivalent of Math.sqrt((x * 2) + 4)</span></span><br><span class="line"><span class="keyword">const</span> composition = compose([</span><br><span class="line">    (x) =&gt; x * <span class="number">2</span>,</span><br><span class="line">    (x) =&gt; x + <span class="number">4</span>,</span><br><span class="line">    <span class="built_in">Math</span>.sqrt</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">composition(<span class="number">4</span>); <span class="comment">// 3.4641016151377544</span></span><br><span class="line">composition(<span class="number">8</span>); <span class="comment">// 4.47213595499958</span></span><br><span class="line">composition(<span class="number">15</span>); <span class="comment">// 5.830951894845301</span></span><br><span class="line">composition(<span class="number">16</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Function composition&lt;/a&gt; i
      
    
    </summary>
    
    
      <category term="javascript" scheme="devanbuggay.com/tags/javascript/"/>
    
      <category term="functional" scheme="devanbuggay.com/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>id Tech 1 Maps in UE4 Part 1: Parsing WAD Map Data</title>
    <link href="devanbuggay.com/2017/10/04/parsing-idtech1-ue4-p1/"/>
    <id>devanbuggay.com/2017/10/04/parsing-idtech1-ue4-p1/</id>
    <published>2017-10-04T17:59:17.000Z</published>
    <updated>2018-01-29T05:37:51.850Z</updated>
    
    <content type="html"><![CDATA[<p>The map data serialization for Doom 1/2 is pretty well outlined here on the <a href="http://doom.wikia.com/wiki/WAD" target="_blank" rel="noopener">Doom wikia</a>. Game data (including map information) is stored in WAD (Where’s All the Data?) files. If you want to follow along with a DOOM 1 or DOOM 2 WAD you will need to purchase the games as the game data is not freeware. If not you could try parsing something like <a href="https://freedoom.github.io" target="_blank" rel="noopener">Freedoom</a>.</p><p>It follows the following format:</p><p>The header struct, refered to as <code>wadinfo_t</code>:</p><table><thead><tr><th>Offset</th><th>Size</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x00</td><td>4</td><td>identification</td><td>“PWAD” or “IWAD”</td></tr><tr><td>0x04</td><td>4</td><td>numlumps</td><td>Number of lumps in WAD</td></tr><tr><td>0x08</td><td>4</td><td>infotableofs</td><td>Offset of infotable</td></tr></tbody></table><p>The directory struct, refered to as <code>filelump_t</code>:</p><table><thead><tr><th>Offset</th><th>Size</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x00</td><td>4</td><td>filepos</td><td>Pointer to the start of the data in the WAD</td></tr><tr><td>0x04</td><td>4</td><td>size</td><td>Size of lump in bytes</td></tr><tr><td>0x08</td><td>8</td><td>name</td><td>String for lumps name. If shorter than 8 bytes must be padded to 8</td></tr></tbody></table><p>We will respresents these two structures like this:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">header_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> numlumps;</span><br><span class="line">    <span class="keyword">int</span> infotableofs;</span><br><span class="line">&#125; <span class="keyword">header_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">directory_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> filepos;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="keyword">directory_t</span>;</span><br></pre></td></tr></table></figure><p>Lets load our WAD into memory and read in the header:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *wad = fopen(<span class="string">"DOOM2.WAD"</span>, <span class="string">"rb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">header_t</span> header;</span><br><span class="line">fread(&amp;header, <span class="keyword">sizeof</span>(<span class="keyword">header_t</span>), <span class="number">1</span>, wad);</span><br></pre></td></tr></table></figure><p>With our header read in we get some information on the structure itself. <code>id</code> should be either <code>&quot;IWAD&quot;</code> (for Internal WAD) or <code>&quot;PWAD&quot;</code> (Used for expansions or modding.) <code>numlumps</code> will be how many lump directories we have with <code>infotableofs</code> being the offset of where this list starts in memory. Now we can start reading in our lumps:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Allocate space for our lumps</span></span><br><span class="line"><span class="keyword">directory_t</span> *lumps = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">directory_t</span>) * header.numlumps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Move the file head to the infotable offset</span></span><br><span class="line">fseek(wad, header.infotableofs, SEEK_SET);</span><br><span class="line"><span class="comment">// Read them in</span></span><br><span class="line">fread(lumps, <span class="keyword">sizeof</span>(<span class="keyword">directory_t</span>), header.numlumps, wad);</span><br></pre></td></tr></table></figure><p>Lets iterate over the first 20 to see what we have to work with.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">directory_t</span> *lump = lumps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.8s (%d) [%d]\n"</span>, lump-&gt;name, lump-&gt;filepos, lump-&gt;size);</span><br><span class="line">    lump++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the output:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PLAYPAL (12) [10752]</span><br><span class="line">COLORMAP (10764) [8704]</span><br><span class="line">ENDOOM (19468) [4000]</span><br><span class="line">DEMO1 (23468) [4834]</span><br><span class="line">DEMO2 (28304) [8018]</span><br><span class="line">DEMO3 (36324) [17898]</span><br><span class="line">MAP01 (54224) [0]</span><br><span class="line">THINGS (54224) [690]</span><br><span class="line">LINEDEFS (54916) [5180]</span><br><span class="line">SIDEDEFS (60096) [15870]</span><br><span class="line">VERTEXES (75968) [1532]</span><br><span class="line">SEGS (77500) [7212]</span><br><span class="line">SSECTORS (84712) [776]</span><br><span class="line">NODES (85488) [5404]</span><br><span class="line">SECTORS (90892) [1534]</span><br><span class="line">REJECT (92428) [436]</span><br><span class="line">BLOCKMAP (92864) [6418]</span><br><span class="line">MAP02 (99284) [0]</span><br><span class="line">THINGS (99284) [1730]</span><br><span class="line">LINEDEFS (101016) [7322]</span><br></pre></td></tr></table></figure><p>The first six are:</p><ul><li><a href="http://doom.wikia.com/wiki/PLAYPAL" target="_blank" rel="noopener">PLAYPAL</a> - Color palettes</li><li><a href="http://doom.wikia.com/wiki/COLORMAP" target="_blank" rel="noopener">COLORMAP</a> - Brighness values</li><li><a href="http://doom.wikia.com/wiki/ENDOOM" target="_blank" rel="noopener">ENDOOM</a> - Text to display when DOOM exits</li><li><a href="http://doom.wikia.com/wiki/Demo" target="_blank" rel="noopener">DEMOX</a> - Demo data</li></ul><p>After that we get to what we are actually interested in, a map marker.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAP01 (54224) [0]</span><br></pre></td></tr></table></figure><p>Notice that the size of this lump is <code>0</code>. This is not always true for WADs though (games like Hexen actually use this space to store data in.) A better test is testing against the name, which must follow the format of: <code>ExMy</code> or <code>MAPxx</code> in the case of Doom.</p><p>What’s important is what comes after the map markers, these structures are always present:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">THINGS (54224) [690]</span><br><span class="line">LINEDEFS (54916) [5180]</span><br><span class="line">SIDEDEFS (60096) [15870]</span><br><span class="line">VERTEXES (75968) [1532]</span><br><span class="line">SEGS (77500) [7212]</span><br><span class="line">SSECTORS (84712) [776]</span><br><span class="line">NODES (85488) [5404]</span><br><span class="line">SECTORS (90892) [1534]</span><br><span class="line">REJECT (92428) [436]</span><br><span class="line">BLOCKMAP (92864) [6418]</span><br></pre></td></tr></table></figure><p>The only ones we need to concern ourselves with are:</p><ul><li>THINGS</li><li>LINEDEFS</li><li>SIDEDEFS</li><li>VERTEXES</li><li>SECTORS</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The map data serialization for Doom 1/2 is pretty well outlined here on the &lt;a href=&quot;http://doom.wikia.com/wiki/WAD&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="c" scheme="devanbuggay.com/tags/c/"/>
    
      <category term="ue4" scheme="devanbuggay.com/tags/ue4/"/>
    
  </entry>
  
  <entry>
    <title>ASCII Lockpicking</title>
    <link href="devanbuggay.com/2017/09/22/ascii-lockpicking/"/>
    <id>devanbuggay.com/2017/09/22/ascii-lockpicking/</id>
    <published>2017-09-22T21:51:06.000Z</published>
    <updated>2019-07-21T04:06:57.567Z</updated>
    
    <content type="html"><![CDATA[<p>Over the years I’ve worked on and off on a roguelike where you play as a modern day serial killer. There were a lot of cool concepts and ideas I played around with for this theme. One of them was forced entry through lockpicking. Oblivion’s system for lockpicking is actually pretty accurate to how it works in the real world so I adopted somethign similar. Here is an in-game gif of the lockpicking mechanic.<br>(With the pin ordering being shown for debug purposes.)</p><p><img src="/images/lockpick.gif" alt="lockpick"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Over the years I’ve worked on and off on a roguelike where you play as a modern day serial killer. There were a lot of cool concepts and 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C sizeof and  offsetof Implementation</title>
    <link href="devanbuggay.com/2017/09/12/sizeof/"/>
    <id>devanbuggay.com/2017/09/12/sizeof/</id>
    <published>2017-09-12T21:22:07.000Z</published>
    <updated>2018-01-16T03:53:45.916Z</updated>
    
    <content type="html"><![CDATA[<p>C has no internal reflection. Which basically means that given a raw pointer there is no way to infer anything about it at runtime. We can’t know if it’s size, what type it is, etc. If it’s a struct we don’t even know </p><p>The C <code>sizeof</code> macro.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sizeof(t) (char *)(&amp;t + 1) - (char *)(&amp;t)</span></span><br></pre></td></tr></table></figure><p>The C <code>offset</code> macro.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> offsetof(t, m) (size_t)&amp;(((t *)0)-&gt;m)</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://en.wikipedia.org/wiki/Sizeof" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sizeof</a></li><li><a href="https://barrgroup.com/Embedded-Systems/How-To/C-Offsetof-Macro" target="_blank" rel="noopener">https://barrgroup.com/Embedded-Systems/How-To/C-Offsetof-Macro</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C has no internal reflection. Which basically means that given a raw pointer there is no way to infer anything about it at runtime. We ca
      
    
    </summary>
    
    
      <category term="c" scheme="devanbuggay.com/tags/c/"/>
    
  </entry>
  
</feed>
